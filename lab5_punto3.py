# -*- coding: utf-8 -*-
"""Lab5-punto3.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/18EjRk4P8nN31kZDpss7eMcyooFMRjC3J
"""

import random
import time
import numpy as np

pip install -U fortran-magic

# Commented out IPython magic to ensure Python compatibility.
# %reload_ext fortranmagic

def RandomMatrixNumpy():
  rows = 100
  cols = 100
  np.random.seed(200)
  start_time = time.time()
  for i in range (10):
    matrix = np.random.randint(100, size=(rows, cols))
  end_time = time.time()
  duration  = ( end_time - start_time ) / 10.0
  print (f"Tiempo (microsegundos) generando matriz : {duration * 10e6}")

def RandomMatrixPython():
  rows = 100
  cols = 100
  matrix = [[0]*rows for i in range(cols)]
  random.seed(200)
  start_time = time.time()
  for k in range (10):
    for i in range(rows):
      for j in range (cols):
        matrix[i][j] = random.randrange(100)
  end_time = time.time()
  duration  = ( end_time - start_time ) / 10.0
  print (f"Tiempo (microsegundos) generando matriz : {duration * 10e6}")

# Commented out IPython magic to ensure Python compatibility.
# %%fortran
# subroutine generate_matrix_fortran(rows,cols,result)
#     integer, intent(in) :: rows
#     integer, intent(in) :: cols
#     REAL, dimension (rows,cols) , intent(out) :: result
#     CALL RANDOM_NUMBER(res)
# end

"""**Resultados con Python, Numpy y Fortran, respectivamente:**"""

RandomMatrixPython()

RandomMatrixNumpy()

rows = 100
cols = 100
start_time = time.time()
for i in range (10):
  generate_matrix_fortran(rows, cols)
end_time = time.time()
duration  = ( end_time - start_time ) / 10.0
print (f"Tiempo (microsegundos) generando matriz : {duration * 10e6} ")